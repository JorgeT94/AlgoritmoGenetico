package algoritmo_genetico;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.KeyEvent;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelConsola = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextArea();
        panelParametros = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        inputNumGeneraciones = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        inputProbCruza = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        inputProbMuta = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        inputTamPoblacion = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        panelCruzasMuta = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCruzaMuta = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Algoritmo Genético");
        setResizable(false);

        consola.setEditable(false);
        consola.setColumns(20);
        consola.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        consola.setRows(5);
        consola.setFocusable(false);
        jScrollPane1.setViewportView(consola);

        javax.swing.GroupLayout panelConsolaLayout = new javax.swing.GroupLayout(panelConsola);
        panelConsola.setLayout(panelConsolaLayout);
        panelConsolaLayout.setHorizontalGroup(
            panelConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
        );
        panelConsolaLayout.setVerticalGroup(
            panelConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Núm. Generaciones:");

        inputNumGeneraciones.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputNumGeneraciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                validarEntero(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Prob. de Cruza:");

        inputProbCruza.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputProbCruza.addKeyListener(new java.awt.event.KeyAdapter(){
        	public void keyTyped(java.awt.event.KeyEvent evt){
        		validarDecimal(evt);
        	}
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Prob. de Mutación:");

        inputProbMuta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputProbMuta.addKeyListener(new java.awt.event.KeyAdapter(){
        	public void keyTyped(java.awt.event.KeyEvent evt){
        		validarDecimal(evt);
        	}
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Tam. de Población:");

        inputTamPoblacion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputTamPoblacion.addKeyListener(new java.awt.event.KeyAdapter(){
        	public void keyTyped(java.awt.event.KeyEvent evt){
        		validarEntero(evt);
        	}
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algoritmo_genetico/play-icon.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		iniciarEjecucion();
        	}
        });

        javax.swing.GroupLayout panelParametrosLayout = new javax.swing.GroupLayout(panelParametros);
        panelParametros.setLayout(panelParametrosLayout);
        panelParametrosLayout.setHorizontalGroup(
            panelParametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParametrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelParametrosLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(inputProbMuta, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelParametrosLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(inputTamPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelParametrosLayout.createSequentialGroup()
                        .addGroup(panelParametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelParametrosLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(inputNumGeneraciones, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelParametrosLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(inputProbCruza, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelParametrosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );
        panelParametrosLayout.setVerticalGroup(
            panelParametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParametrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inputNumGeneraciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelParametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputProbCruza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelParametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(inputProbMuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelParametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(inputTamPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tablaCruzaMuta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                
            },
            new String [] {
                "# Generación", "# Cruzas", "# Mutaciones"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaCruzaMuta);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Total de Cruzas y Mutaciones:");

        javax.swing.GroupLayout panelCruzasMutaLayout = new javax.swing.GroupLayout(panelCruzasMuta);
        panelCruzasMuta.setLayout(panelCruzasMutaLayout);
        panelCruzasMutaLayout.setHorizontalGroup(
            panelCruzasMutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCruzasMutaLayout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(0, 68, Short.MAX_VALUE))
            .addGroup(panelCruzasMutaLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelCruzasMutaLayout.setVerticalGroup(
            panelCruzasMutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCruzasMutaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelParametros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelCruzasMuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(panelConsola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCruzasMuta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelParametros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelConsola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarEjecucion(){
    	if(validarEntradas()){
			consola.setText("");
			limpiarTabla();
			generaciones = Integer.parseInt(inputNumGeneraciones.getText());
			float probCruza = Float.parseFloat(inputProbCruza.getText());
			float probMuta = Float.parseFloat(inputProbMuta.getText());
			tamPob = Integer.parseInt(inputTamPoblacion.getText());
			AlgoritmoGenetico aG = new AlgoritmoGenetico(generaciones,probCruza,probMuta,tamPob,4);
			imprimirInformacion(aG.getPoblacion(),aG.getPadresCruzas(),aG.getHijosCruzas(),aG.getPuntosCruza(),aG.getNumMutas(),aG.getEjemploMutacion());
			llenarTabla(aG.getNumCruzas(), aG.getNumMutas());
		}else{
			JOptionPane.showConfirmDialog(this, "Los campos de entrada proporcionados no son válidos.", "ERROR", JOptionPane.CLOSED_OPTION, JOptionPane.ERROR_MESSAGE);
		}
    }
    
    private void limpiarTabla(){
    	for(int i=0; i<tablaCruzaMuta.getRowCount();){
			modelo.removeRow(i);
		}
    }
    
    private void llenarTabla(int[] cruzas, int[] mutaciones){
    	modelo = (DefaultTableModel) tablaCruzaMuta.getModel();
    	for(int i=0; i<=generaciones; i++){
			modelo.addRow(new Object[]{i,cruzas[i],mutaciones[i]});
		}
    }
    
    private void imprimirInformacion(Vector poblacion, float[][] padres, float[][] hijos, int[] puntosCruza, int[] mutaciones, float[][] ejMuta){
    	consola.append("--> Mejores individuos de cada generación:\n");
    	for(int i=0; i<poblacion.size(); i++){
    		consola.append("Generación "+i+": ");
			consola.append(getMejorInd((float[][]) poblacion.elementAt(i))+"\n");
		}
    	imprimirCruzas(padres,hijos,puntosCruza);
    	imprimirMutaciones(mutaciones,ejMuta);
    }
    
    private void imprimirMutaciones(int[] m, float[][] ej){
    	boolean hayMutacion = false;
    	for(int i=0; i<m.length; i++){
			if(m[i]!=0){
				consola.append("\n\n--> Muestra de mutación en generación "+(int)ej[0][0]+": \nAntes de Mutación: [");
				for(int j=1; j<ej[0].length; j++){
					if(j==ej[0].length-1)
						consola.append((int)ej[0][j]+"]");
					else
						consola.append((int)ej[0][j]+" ");
				}
				consola.append("\nDespués de Mutación: ");
				for(int j=1; j<ej[1].length; j++){
					if(j==ej[1].length-1)
						consola.append((int)ej[1][j]+"]");
					else
						consola.append((int)ej[1][j]+" ");
				}
				hayMutacion = true;
				break;
			}
		}
    	if(!hayMutacion)
    		consola.append("\n\nNo se realizaron mutaciones en esta ejecución del algoritmo.");
    }
    
    private void imprimirCruzas(float[][] padres, float[][] hijos, int[] puntosCruza){
    	consola.append("\n--> Cruza de la primer generación:\n");
    	consola.append("Generación "+((int)padres[0][0])+":\nPadre 1: [");
    	for(int i=1; i<padres[0].length; i++){
    		if(i==padres[0].length-1)
    			consola.append((int)padres[0][i]+"]");
    		else
    			consola.append((int)padres[0][i]+" ");
    	}
    	consola.append("\nPadre 2: [");
    	for(int i=1; i<padres[1].length; i++){
    		if(i==padres[1].length-1)
    			consola.append((int)padres[1][i]+"]");
    		else
    			consola.append((int)padres[1][i]+" ");
    	}
    	consola.append("\nHijo 1: [");
    	for(int i=1; i<hijos[0].length; i++){
    		if(i==hijos[0].length-1)
    			consola.append((int)hijos[0][i]+"]");
    		else
    			consola.append((int)hijos[0][i]+" ");
    	}
    	consola.append("\nHijo 2: [");
    	for(int i=1; i<hijos[1].length; i++){
    		if(i==hijos[1].length-1)
    			consola.append((int)hijos[1][i]+"]");
    		else
    			consola.append((int)hijos[1][i]+" ");
    	}
    	consola.append("\nPunto de Cruza: "+puntosCruza[0]);
    	consola.append("\n\n--> Cruza de la última generación:\n");
    	consola.append("Generación "+((int)padres[2][0])+":\nPadre 1: [");
    	for(int i=1; i<padres[2].length; i++){
    		if(i==padres[2].length-1)
    			consola.append((int)padres[2][i]+"]");
    		else
    			consola.append((int)padres[2][i]+" ");
    	}
    	consola.append("\nPadre 2: [");
    	for(int i=1; i<padres[3].length; i++){
    		if(i==padres[3].length-1)
    			consola.append((int)padres[3][i]+"]");
    		else
    			consola.append((int)padres[3][i]+" ");
    	}
    	consola.append("\nHijo 1: [");
    	for(int i=1; i<hijos[2].length; i++){
    		if(i==hijos[2].length-1)
    			consola.append((int)hijos[2][i]+"]");
    		else
    			consola.append((int)hijos[2][i]+" ");
    	}
    	consola.append("\nHijo 2: [");
    	for(int i=1; i<hijos[3].length; i++){
    		if(i==hijos[3].length-1)
    			consola.append((int)hijos[3][i]+"]");
    		else
    			consola.append((int)hijos[3][i]+" ");
    	}
    	consola.append("\nPunto de Cruza: "+puntosCruza[1]);
    }
    
    private String getMejorInd(float[][] m){
    	String s="";
    	float mayor = 0.0f;
    	Vector<Integer> individuos = new Vector<Integer>();
    	for(int i=0; i<m.length; i++){
    		if(m[i][m[i].length-1] > mayor){
    			mayor = m[i][m[i].length-1];
    			individuos.clear();
    			individuos.addElement(i);
    		} else if(m[i][m[i].length-1] == mayor){
    			individuos.addElement(i);
    		}
		}
    	int ind = individuos.elementAt(0);
    	if(individuos.size() == 1){
    		s = "Individuo ["+(ind+1)+"] con cromosoma [";
    	}else if(individuos.size() == tamPob){ 
    		s = "Todos los individuos con cromosoma [";
    	}else{
    		s = "Individuo ["+(individuos.elementAt(0)+1)+"] (y "+(individuos.size()-1)+" más) ";
    		s+="con cromosoma [";
    	}
    	for(int i=0; i<m[ind].length-1; i++)
			s+= (i == m[ind].length-2 ? ((int)m[ind][i]+"]") : ((int)m[ind][i]+"-"));
    	s+=" y aptitud ["+mayor+"]";
    	return s;
    }
    
    private boolean validarEntradas(){
    	boolean correcto = true;
    	if(inputNumGeneraciones.getText().isEmpty() || inputProbCruza.getText().isEmpty() || inputProbMuta.getText().isEmpty() || inputTamPoblacion.getText().isEmpty()){
    		correcto = false;
    	}
    	return correcto;
    }
    
    private void validarEntero(java.awt.event.KeyEvent evt){
    	char c = evt.getKeyChar();
    	if(evt.getSource() instanceof JTextField ){
    		if(!Character.isDigit(c) && c!=KeyEvent.VK_BACK_SPACE) { 
                getToolkit().beep();            
                evt.consume();
    		}
        }
    }
    
    private void validarDecimal(java.awt.event.KeyEvent evt){
    	char c = evt.getKeyChar();
    	if(evt.getSource() instanceof JTextField){
    		if (!Character.isDigit(c) && c!=KeyEvent.VK_BACK_SPACE && c!='.') {
				getToolkit().beep();
				evt.consume();
			} else if(c=='.'){
				if( ((JTextField) evt.getSource()).getText().contains(c+"") ){
					getToolkit().beep();
					evt.consume();
				}
			}
    	}
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea consola;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaCruzaMuta;
    private javax.swing.JTextField inputNumGeneraciones;
    private javax.swing.JTextField inputProbCruza;
    private javax.swing.JTextField inputProbMuta;
    private javax.swing.JTextField inputTamPoblacion;
    private javax.swing.JPanel panelConsola;
    private javax.swing.JPanel panelCruzasMuta;
    private javax.swing.JPanel panelParametros;
    private int tamPob;
    private int generaciones;
    private DefaultTableModel modelo;
    // End of variables declaration//GEN-END:variables
}
